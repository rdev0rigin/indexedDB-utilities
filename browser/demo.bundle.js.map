{"version":3,"file":"demo.bundle.js","sources":["webpack:///webpack/bootstrap 3c2b2cd71976161a7d54","webpack:///./demos/demo.ts","webpack:///./utilities/index-db.utility.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3c2b2cd71976161a7d54","//tslint:disable\nimport {openIDBUtilities} from \"../utilities/index-db.utility\";\n\nasync function demo() {\n\n\t/**\n\t *\n\t * Call iDBU(config) with config parameters to open an IndexedDB and return a promise that holds\n\t * an Object with helper methods, add(), put(), update(), get() and remove().\n     * if one doesn't exsist then it will be made. Note: Once ObjectStores are defined they\n     * IDBs version number and to add more you must provide a new version number.\n     *\n     *  The Config Object = {\n     *      version: Number\n     *      dbName: String\n     *      storeNames: String[]\n     *      keyPath?: String\n     *\t}\n     *\n     **/\n\n\tconsole.log('calling open');\n\tconst stores = await openIDBUtilities({\n\t\tversion: 1, // Numbers should be a positive Number and not contain any decimal digits.\n\t\tdbName: 'DemoIDB-1',\n\t\tstoreNames: ['demoStore0', 'demoStore1'], // Provide and array of the storeNames in which you wish to store values in.\n\t\tkeyPath: 'myKey' // keyPath is optional, if provided this will be how you get selective values from the stores and must be a property in your object value you wish to store. If omitted the stores will be indexed 0 to (n-1);\n\t});\n\tconsole.log('stores', stores);\n\t/**\n\t * \tadd(storeName: string, value: any) => Promise<string | {}>;\n\t * \treturns a string with the saved value's key or Request.Result Object.\n\t * \tNote: You cannot add new values to objects with keys that already exsist, use put() or update().\n\t */\n\tconsole.log('calling add');\n\tconst addResponse = await stores.add(\n\t\t'demoStore0',\n\t\t{\n\t\t\tmyKey: 'foo',\n\t\t\tvalue: [{ bat: 'squeek'}, {bear: 'grrr'}]\n\t\t})\n\t\t.catch(err => console.log('Add Error', err));\n\tconsole.log('add response', addResponse); // add response foo\n\n\t/**\n\t *  get(storeName: string, key: string) => Promise<any>;\n\t *  returns the value stored that matches the value stored in [keyPath]: String\n\t *  or throws an Request.Result Object\n\t */\n\tconsole.log('calling get');\n\tlet getResponse = await stores.get('demoStore0', 'foo');\n\tconsole.log('get response', getResponse); // get response {myKey:'foo', value: [{ bat: 'squeek'}, {bear: 'grrr'}]}\n\n\t/**\n\t *  put(storeName: string, value: any) => Promise<string | {}>;\n\t *  returns a string with the saved value's key or throws Request.Result Object.\n\t *  Note: This will overwrite your value saved related your key.\n\t */\n\tconsole.log('calling put');\n\tconst putResponse = await stores.put(\n\t\t'demoStore0',\n\t\t{\n\t\t\tmyKey: 'foo',\n\t\t\tvalue: [{ cat: 'meow'}]\n\t\t});\n\n\tconsole.log('put response', putResponse); // put response foo\n\tgetResponse = await stores.get('demoStore0', 'foo');\n\tconsole.log('get response', getResponse); // {myKey:'foo', value: [{cat: 'meow'}]}\n\n\t/**\n\t *  update(storeName: string, key: string, value: any) => Promise<string | {}>;\n\t *  returns a string with the updated value's key or throws an Request.Result Object.\n\t *  Note: This will merge with your stored value, if it is an array it will concatenate\n\t *  the new values.\n\t */\n\tconsole.log('calling update');\n\tconst updateResponse = await stores.update(\n\t\t'demoStore0',\n\t\t'foo',\n\t\t{\n\t\t\tmyKey: 'foo',\n\t\t\tvalue: [{ bat: 'squeek'}, {bear: 'grrr', dog: ['woof', 'bark']}, {cat: 'purr'}, ['happy hacking!']]\n\t\t});\n\tconsole.log('update response', updateResponse); // update response foo\n\tgetResponse = await stores.get('demoStore0', 'foo');\n\tconsole.log('get response', getResponse); // get response {myKey:'foo', value: [{cat: 'meow'}, { bat: 'squeek'}, {bear: 'grrr', dog: ['woof', 'bark']}, {cat: 'purr'}, ['happy hacking!']]}\n\n\t/**\n\t *  remove(storeName: string, key: string) => Promise<any>;\n\t *  returns void or throws an Request.Result Object\n\t */\n\tconsole.log('calling remove');\n\tconst removeResponse = await stores.remove('demoStore0', 'foo')\n\t\t.catch(err => console.log('remove error', err));\n\tconsole.log('removeResponse', removeResponse); // removeResponse undefined\n}\nconsole.log('calling demo');\ndemo()\n\t.then(res => console.log('response', res))\n\t.catch(err => console.log('Error: ', err));\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./demos/demo.ts","import { IDBUConfigModel } from '../models/config.model';\nimport { IDBUtility } from '../models/idb-utility.model';\n\nconst openIDB = async (config: IDBUConfigModel): Promise<IDBUtility> => {\n\tif (!window.indexedDB) {\n\t\t// console.log(\"Your browser doesn't support a stable version of IndexedDB. IndexedDB will not be available.\");\n\t\treturn void 0;\n\t}\n\treturn new Promise<IDBUtility>((resolve, reject) => {\n\t\tconst request = indexedDB.open(config.dbName, config.version);\n\t\trequest.onerror = (evt: ErrorEvent | any) => {\n\t\t\treject(request.result);\n\t\t};\n\t\trequest.onupgradeneeded = (evt: IDBVersionChangeEvent | any): void => {\n\t\t\tconst nextDb = evt.target.result;\n\t\t\tif(config.keyPath){\n\t\t\t\tconfig.storeNames\n\t\t\t\t\t.forEach((storeName: string) => {\n\t\t\t\t\t\tnextDb.createObjectStore(\n\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkeyPath: config.keyPath\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconfig.storeNames\n\t\t\t\t\t.forEach((storeName: string) => {\n\t\t\t\t\t\tnextDb.createObjectStore(\n\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tautoIncrement: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\trequest.onsuccess = (evt) => {\n\t\t\tconst db = request.result;\n\t\t\tresolve({\n\t\t\t\tasync add(storeName: string, value: {}): Promise<string | {}> {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tconst request = db.transaction([storeName], 'readwrite')\n\t\t\t\t\t\t\t.objectStore(`${storeName}`)\n\t\t\t\t\t\t\t.add(value);\n\t\t\t\t\t\trequest.onsuccess = (evt) => {\n\t\t\t\t\t\t\tres(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t\trequest.onerror = () => {\n\t\t\t\t\t\t\trej(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tasync put(storeName: string, value: {}): Promise<string | {}> {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tconst request = db.transaction([storeName], 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.put(value);\n\t\t\t\t\t\trequest.onsuccess = () => {\n\t\t\t\t\t\t\tres(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t\trequest.onerror = () => {\n\t\t\t\t\t\t\trej(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tasync update(storeName: string, key: string, value: ({} | any[])): Promise<string | {}> {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tconst transaction = db.transaction([storeName], 'readwrite');\n\t\t\t\t\t\tconst getRequest = transaction\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.get(key);\n\t\t\t\t\t\ttransaction.onerror = () => {\n\t\t\t\t\t\t\trej(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tgetRequest.onsuccess = () => {\n\t\t\t\t\t\t\tconst currentValue = getRequest.result;\n\t\t\t\t\t\t\tconst updatedValue = mergeDeep(currentValue, value);\n\t\t\t\t\t\t\tconst delRequest = transaction\n\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t.delete(key);\n\t\t\t\t\t\t\tdelRequest.onsuccess = () => {\n\t\t\t\t\t\t\t\tconst addRequest = transaction\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.add(updatedValue);\n\t\t\t\t\t\t\t\taddRequest.onsuccess = () => {\n\t\t\t\t\t\t\t\t\tres(addRequest.result);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tasync remove(storeName: string, keyValue: string): Promise<any> {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tconst delRequest = db.transaction([storeName], 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.delete(keyValue);\n\t\t\t\t\t\tdelRequest.onsuccess = () => {\n\t\t\t\t\t\t\tres(delRequest.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdelRequest.onerror = () => {\n\t\t\t\t\t\t\trej(delRequest.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tasync get(storeName: string, key: string): Promise<{}> {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tconst request = db.transaction([storeName])\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.get(key);\n\t\t\t\t\t\trequest.onsuccess = () => {\n\t\t\t\t\t\t\tres(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t\trequest.onerror = () => {\n\t\t\t\t\t\t\trej(request.result);\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t});\n};\n\n// https://stackoverflow.com/a/48275932/7473184\nfunction mergeDeep (target, source)  {\n\tif (typeof target === \"object\" && typeof source === \"object\") {\n\t\tfor (const key in source) {\n\t\t\tif (source[key] === null\n\t\t\t\t&& (target[key] === undefined\n\t\t\t\t|| target[key] === null)) {\n\t\t\t\t\ttarget[key] = null;\n\t\t\t} else if (source[key] instanceof Array) {\n\t\t\t\tif (!target[key]) target[key] = [];\n\t\t\t\ttarget[key] = target[key]\n\t\t\t\t\t.concat(source[key]);\n\t\t\t} else if (typeof source[key] === \"object\") {\n\t\t\t\tif (!target[key]) target[key] = {};\n\t\t\t\tthis.mergeDeep(target[key], source[key]);\n\t\t\t} else {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\nexport const openIDBUtilities = openIDB;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./utilities/index-db.utility.ts"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;;;;;;AAEA;;;;;;;;;;;;;;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AALA;AAMA;AACA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;;AANA;AAOA;AAEA;;;;AAIA;AACA;AACA;;AAAA;AACA;AAEA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;;AALA;AAOA;AACA;;AAAA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAIA;AACA;AACA;;AANA;AAOA;AACA;;AAAA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;;AADA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}